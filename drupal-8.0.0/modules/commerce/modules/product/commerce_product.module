<?php

/**
 * @file
 * Defines the Product entity and associated features.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function commerce_product_theme() {
  return [
    'product_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Adds the default stores field to a product.
 *
 * A product can belong to multiple stores.
 * Store id can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each order type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 */
function commerce_product_add_stores_field($product_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'stores');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'stores');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'stores',
      'entity_type' => 'commerce_product',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_store',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => 'Stores',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('commerce_product', $product_type->id(), 'default')
      ->setComponent('stores', [
        'type' => 'entity_select',
        'weight' => -10,
      ])
      ->save();
  }
}

/**
 * Adds the default body field to a product type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Body'.
 */
function commerce_product_add_body_field($product_type, $label = 'Body') {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'body');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'body');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'body',
      'entity_type' => 'commerce_product',
      'type' => 'text_with_summary',
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => $label,
      'settings' => ['display_summary' => FALSE],
    ]);
    $field->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('commerce_product', $product_type->id(), 'default')
      ->setComponent('body', [
        'type' => 'text_textarea_with_summary',
        'weight' => 1,
      ])
      ->save();
    // Assign display settings for 'default' view mode.
    entity_get_display('commerce_product', $product_type->id(), 'default')
      ->setComponent('body', [
        'label' => 'hidden',
        'type' => 'text_default',
      ])
      ->save();
  }
}

/**
 * Adds the default variations field to a product type.
 *
 * Variations can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each product type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 */
function commerce_product_add_variations_field($product_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'variations');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'variations');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'variations',
      'entity_type' => 'commerce_product',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_product_variation',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => 'Variations',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [
          'target_bundles' => [
            $product_type->getVariationType(),
          ],
        ],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('commerce_product', $product_type->id(), 'default')
      ->setComponent('variations', [
        'type' => 'inline_entity_form_complex',
        'weight' => 10,
        'settings' => [
          'override_labels' => TRUE,
          'label_singular' => 'variation',
          'label_plural' => 'variations',
        ],
      ])
      ->save();
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_product_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  if ($field_name == 'path' && $entity_type == 'commerce_product' && $widget_name == 'path') {
    $element['alias']['#description'] = t('The alternative URL for this product. Use a relative path. For example, "/my-product".');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_edit_form'.
 */
function commerce_product_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  if ($field->getTargetEntityTypeId() != 'commerce_product_variation') {
    return;
  }

  if ($field->getType() == 'entity_reference' && $field->getFieldStorageDefinition()->getCardinality() == 1) {
    $defaultAttributeField = $field->getThirdPartySetting('commerce_product', 'attribute_field', FALSE);
    $defaultAttributeWidget = $field->getThirdPartySetting('commerce_product', 'attribute_widget', 'select');
    $defaultAttributeWidgetTitle = $field->getThirdPartySetting('commerce_product', 'attribute_widget_title', NULL);

    $form['field']['commerce_product'] = [
      '#type' => 'fieldset',
      '#title' => t('Attribute field settings'),
      '#description' => t('Single value fields attached to products can function as attribute selection fields on Add to Cart forms. When an Add to Cart form contains multiple products, attribute field data can be used to allow customers to select a product based on the values of the field instead of just from a list of product titles.'),
      '#weight' => 5,
      '#collapsible' => FALSE,
    ];

    $form['field']['commerce_product']['attribute_field'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable this field to function as a product attribute field on Add to Cart forms.'),
      '#default_value' => $defaultAttributeField,
    ];
    $form['field']['commerce_product']['attribute_widget'] = [
      '#type' => 'radios',
      '#title' => t('Product attribute selection widget'),
      '#description' => t('The type of element used to select an option if used on an Add to Cart form.'),
      '#options' => [
        'select' => t('Select list'),
        'radios' => t('Radio buttons'),
      ],
      '#states' => [
        'visible' => [
          ':input[name="attribute_field"]' => ['checked' => TRUE],
        ],
      ],
      '#default_value' => $defaultAttributeWidget,
    ];
    // Determine the default attribute widget title.
    $form['field']['commerce_product']['attribute_widget_title'] = [
      '#type' => 'textfield',
      '#title' => t('Attribute widget title'),
      '#description' => t('Specify the title to use for the attribute widget on the Add to Cart form.'),
      '#states' => [
        'visible' => [
          ':input[name="attribute_field"]' => ['checked' => TRUE],
        ],
      ],
      '#default_value' => $defaultAttributeWidgetTitle,
    ];
    $form['actions']['submit']['#submit'][] = 'commerce_product_form_field_config_edit_form_submit';
  }
}

/**
 * Form submission handler for commerce_product_form_field_ui_field_edit_form_alter
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function commerce_product_form_field_config_edit_form_submit($form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  $formFields = &$form_state->getValues('field');
  // If the attribute field is checked, update the attribute fields.
  if ($formFields['attribute_field']) {
    $field->setThirdPartySetting('commerce_product', 'attribute_widget_title', $formFields['attribute_widget_title']);
    $field->setThirdPartySetting('commerce_product', 'attribute_widget', $formFields['attribute_widget']);
    $field->setThirdPartySetting('commerce_product', 'attribute_field', TRUE);
    $field->save();
  }
  else {
    $field->unsetThirdPartySetting('commerce_product', 'attribute_widget_title');
    $field->unsetThirdPartySetting('commerce_product', 'attribute_widget');
    $field->unsetThirdPartySetting('commerce_product', 'attribute_field');
    $field->save();
  }
}
